// Input parameters provided by the user
// These should be set as workflow inputs in vRO

// Example of the inputs you need to add in vRO workflow as input parameters
// var vmTemplateName (type: String) - The name of the VM template to clone from
// var vmName (type: String) - The name of the new VM
// var datastoreName (type: String) - The name of the datastore where the VM will be stored
// var hostName (type: String) - The name of the ESXi host to use
// var resourcePoolName (type: String) - The name of the resource pool to assign
// var folder (type: VcFolder) - The folder where the new VM will be created
// var customizationSpecName (type: String) - The name of the vCenter customization spec
// var ipAddress (type: String) - The static IP address for the VM
// var subnetMask (type: String) - The subnet mask for the VM
// var defaultGateway (type: String) - The default gateway for the VM
// var dnsServers (type: Array/String) - Array of DNS server IP addresses for the VM

// Search for the VM template by name
var vmTemplate = VcPlugin.getAllVirtualMachines().find(function(vm) {
    return vm.name == vmTemplateName;
});
if (!vmTemplate) {
    throw "Template '" + vmTemplateName + "' not found!";
}

// Search for the datastore by name
var datastore = VcPlugin.getAllDatastores().find(function(ds) {
    return ds.name == datastoreName;
});
if (!datastore) {
    throw "Datastore '" + datastoreName + "' not found!";
}

// Search for the ESXi host by name
var host = VcPlugin.getAllHostSystems().find(function(h) {
    return h.name == hostName;
});
if (!host) {
    throw "Host '" + hostName + "' not found!";
}

// Search for the resource pool by name (under the host)
var resourcePool = host.parent.resourcePool.resourcePools.find(function(pool) {
    return pool.name == resourcePoolName;
});
if (!resourcePool) {
    throw "Resource Pool '" + resourcePoolName + "' not found on host '" + hostName + "'!";
}

// Retrieve the customization spec from vCenter
var customizationSpecMgr = vmTemplate.sdkConnection.customizationSpecManager;
var specItem = customizationSpecMgr.getCustomizationSpec(customizationSpecName);
if (!specItem) {
    throw "Customization Spec '" + customizationSpecName + "' not found!";
}
var customizationSpec = specItem.spec;

// Set the VM name in the customization spec
customizationSpec.identity = new VcCustomizationFixedName();
customizationSpec.identity.name = vmName; // Use the user-provided VM name

// Create a new IP configuration for the guest OS
var adapterMapping = new VcCustomizationAdapterMapping();
adapterMapping.adapter = new VcCustomizationIPSettings();

// Set the static IP address, subnet mask, and gateway
adapterMapping.adapter.ip = new VcCustomizationFixedIp();
adapterMapping.adapter.ip.ipAddress = ipAddress; // Use user-provided IP address
adapterMapping.adapter.subnetMask = subnetMask;  // Use user-provided subnet mask
adapterMapping.adapter.gateway = [defaultGateway]; // Use user-provided default gateway

// Set the DNS server(s)
adapterMapping.adapter.dnsServerList = dnsServers; // Use user-provided DNS servers

// Apply the network configuration to the customization spec
customizationSpec.nicSettingMap = [adapterMapping];

// Optionally, set a time zone (for Windows guests, if needed)
customizationSpec.globalIPSettings = new VcCustomizationGlobalIPSettings();
customizationSpec.globalIPSettings.dnsServerList = dnsServers; // Apply global DNS servers

// Setup the VM relocation and clone specifications
var relocateSpec = new VcVirtualMachineRelocateSpec();
relocateSpec.datastore = datastore; // Use user-provided datastore
relocateSpec.pool = resourcePool;   // Use user-provided resource pool
relocateSpec.host = host;           // Use user-provided host

var cloneSpec = new VcVirtualMachineCloneSpec();
cloneSpec.location = relocateSpec;
cloneSpec.customization = customizationSpec; // Apply the updated customization spec
cloneSpec.powerOn = true; // Automatically power on the VM after cloning

// Initiate the cloning task
var cloneTask = vmTemplate.cloneVM_Task(folder, vmName, cloneSpec);

// Optional: Monitor the task (if needed) for completion
