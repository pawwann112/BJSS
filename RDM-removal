# Connect to vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "adm_alpa@group.intra"
$LoginPassword = "MUZlDJmZPJdH2"

Connect-VIServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of ESXi Hosts to Process
$esxiHosts = @(
"ch-esx01029.group.intra","ch-esx01028.group.intra","ch-esx00028.group.intra","ch-esx00029.group.intra","esxp151.group.intra","esxp50.group.intra","esxp51.group.intra","esxp150.group.intra","ch-esx01032.group.intra","esxp170.group.intra","ch-esx00032.group.intra","esxp70.group.intra","esxd191.group.intra","esxd190.group.intra","esxd90.group.intra","esxd91.group.intra","esxd170.group.intra","esxd71.group.intra","esxd70.group.intra","esxd171.group.intra","esxd281.group.intra","ch-esx01025.group.intra","ch-esx01027.group.intra","esxd381.group.intra","ch-esx00027.group.intra","ch-esx01026.group.intra","ch-esx00026.group.intra","ch-esx00025.group.intra","ch-esx00030.group.intra","ch-esx00031.group.intra","ch-esx01031.group.intra","ch-esx01030.group.intra","ch-esx00009.group.intra","esxd530.group.intra","ch-esx01009.group.intra","ch-esx01010.group.intra","esxd430.group.intra","ch-esx00010.group.intra","ch-esx00014.group.intra","ch-esx01014.group.intra","ch-esx01013.group.intra","ch-esx00013.group.intra","ch-esx00012.group.intra","ch-esx01012.group.intra","ch-esx00011.group.intra","ch-esx01011.group.intra","ch-esx01002.group.intra","ch-esx00003.group.intra","ch-esx01003.group.intra","ch-esx00002.group.intra","ch-esx00059.group.intra","ch-esx01059.group.intra","ch-esx00008.group.intra","ch-esx01008.group.intra","ch-esx01034.group.intra","ch-esx00034.group.intra","ch-esx01007.group.intra","ch-esx00007.group.intra"
)

# List of LUNs to be removed (Canonical Names)
$lunCanonicalNames = @(
    "naa.60002ac000000000000022f200019bb2","naa.60002ac0000000000000027700019bb2","naa.60002ac00000000000001d0900019bb2"
)

# Process each ESXi host
foreach ($esxiHost in $esxiHosts) {
    Write-Host "Processing Host: $esxiHost"

    # Get VMHost object
    $vmHost = Get-VMHost -Name $esxiHost

    foreach ($lunCanonicalName in $lunCanonicalNames) {
        Write-Host "Processing LUN: $lunCanonicalName on Host: $esxiHost"

        # Check if the LUN is mounted as a VMFS datastore
        $datastore = Get-Datastore | Where-Object { $_.ExtensionData.Info.Vmfs.Extent | Where-Object { $_.DiskName -eq $lunCanonicalName } }
        if ($datastore) {
            Write-Host "Datastore found on LUN $lunCanonicalName : $($datastore.Name)"

            # Check if the datastore is in maintenance mode
            if ($datastore.State -eq "maintenance") {
                Write-Host "Unmounting Datastore: $($datastore.Name)"
                $datastore | Unmount-Datastore -Confirm:$false
            } else {
                Write-Host "Datastore $($datastore.Name) is not in maintenance mode. Skipping unmount."
                continue
            }
        }

        # Detach the LUN from the host
        $scsiLun = Get-ScsiLun -VmHost $vmHost -CanonicalName $lunCanonicalName
        if ($scsiLun -and $scsiLun.State -eq "Attached") {
            Write-Host "Detaching LUN: $lunCanonicalName from Host: $esxiHost"
            $scsiLun | Set-ScsiLun -State Off -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName is already detached from Host: $esxiHost"
        }
    }
}

# Remove permanently detached LUNs from each ESXi host
Write-Host "Removing permanently detached LUNs..."
foreach ($esxiHost in $esxiHosts) {
    $vmHost = Get-VMHost -Name $esxiHost
    foreach ($lunCanonicalName in $lunCanonicalNames) {
        $detachedLun = Get-ScsiLun -VmHost $vmHost | Where-Object { $_.CanonicalName -eq $lunCanonicalName -and $_.State -eq "NotPresent" }
        if ($detachedLun) {
            Write-Host "Removing LUN: $lunCanonicalName from Host: $esxiHost"
            Remove-ScsiLun -ScsiLun $detachedLun -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName not found or already removed from Host: $esxiHost"
        }
    }
}

# Disconnect from vCenter Server
Disconnect-VIServer -Server $vCenterServer -Confirm:$false

Write-Host "Script execution complete."





# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "adm_alpa@group.intra"


Connect-VIServer -Server $vCenterServer 

# List of clusters to apply the settings
$clusters = @("AE-VSAN","BS-VSAN","FR-VSAN","GG-VSAN","GI-VSAN","HK-VSAN","IL-VSAN","LU-VSAN","MC-VSAN","UK-VSAN")  # Replace with your cluster names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each cluster
foreach ($clusterName in $clusters) {
    Write-Host "Processing cluster: $clusterName"
    
    # Get all hosts in the current cluster
    $vmHosts = Get-Cluster -Name $clusterName | Get-VMHost
    
    foreach ($vmHost in $vmHosts) {
        Write-Host "Configuring host: $($vmHost.Name)"
        Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name) in cluster: $clusterName"

        # Define a hashtable of settings to apply
        $settings = @{
            "Security.AccountUnlockTime" = 900
            "Security.AccountLockFailures" = 3
            "Security.PasswordHistory" = 5
            "Security.PasswordQualityControl" = "retry=3 min=disabled,disabled,disabled,14,14"
            "UserVars.DcuiTimeOut" = 600
            "UserVars.ESXiShellInteractiveTimeOut" = 600
            "UserVars.ESXiShellTimeOut" = 600
            "UserVars.SuppressShellWarning" = 0
            "Syslog.global.logHost" = "udp://160.219.63.155:514"
        }
        
        # Apply each setting
        foreach ($setting in $settings.GetEnumerator()) {
            $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
            $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
            Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
        }
        
        # vSwitch Security Settings
       # $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmits $false -Confirm:$false
       # Add-Content -Path $logFile -Value "Set ForgedTransmits to $false on virtual switches of $($vmHost.Name)"
        
       # $vmHost | Get-VirtualPortGroup -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmitsInherited $true -Confirm:$false
        #Add-Content -Path $logFile -Value "Set ForgedTransmitsInherited to $true on virtual port groups of $($vmHost.Name)"
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"




# Define vCenter details
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "adm_alpa@group.intra"

# Connect to vCenter
Connect-VIServer -Server $vCenterServer 

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Get all ESXi hosts in vCenter
$vmHosts = Get-VMHost

# Loop through each ESXi host
foreach ($vmHost in $vmHosts) {
    Write-Host "Configuring host: $($vmHost.Name)"
    Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name)"

    # Define a hashtable of settings to apply
    $settings = @{
        "Security.AccountUnlockTime" = 900
        "Security.AccountLockFailures" = 3
        "Security.PasswordHistory" = 5
        "Security.PasswordQualityControl" = "retry=3 min=disabled,disabled,disabled,14,14"
        "UserVars.DcuiTimeOut" = 600
        "UserVars.ESXiShellInteractiveTimeOut" = 600
        "UserVars.ESXiShellTimeOut" = 600
        "UserVars.SuppressShellWarning" = 0
        "Syslog.global.logHost" = "udp://160.219.63.155:514"
    }
    
    # Apply each setting
    foreach ($setting in $settings.GetEnumerator()) {
        $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
        $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
        Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
    }
    
    # vSwitch Security Settings (Uncomment if needed)
    # $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmits $false -Confirm:$false
    # Add-Content -Path $logFile -Value "Set ForgedTransmits to $false on virtual switches of $($vmHost.Name)"
    
    # $vmHost | Get-VirtualPortGroup -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmitsInherited $true -Confirm:$false
    # Add-Content -Path $logFile -Value "Set ForgedTransmitsInherited to $true on virtual port groups of $($vmHost.Name)"
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"
