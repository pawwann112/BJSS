
# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "adm_alpa@group.intra"


Connect-VIServer -Server $vCenterServer 

# List of clusters to apply the settings
$clusters = @("DEVVDI","TSTDMZECOM","SINGAPORETSTGITS","TSTATP","TSTINTWIN","TSTDMZ","CORE BANKING COMPONENTS","WEALTH-SQL-UAT-SEC","UNBLU-PRD","DMZLX","DMZINFRA","WEALTH-SQL-PRD","ELK","VAULT","NETWORK","DLP","IDM","DMZGITS","DMZECOM","UNBLU-UAT","INTWIN","DMZTRAD","DMZGITS-VDI","DMZWINCORE","SECURITY","INTDW","INTLX-Stage","INTLX","DMZWIN","HID-CL")  # Replace with your cluster names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each cluster
foreach ($clusterName in $clusters) {
    Write-Host "Processing cluster: $clusterName"
    
    # Get all hosts in the current cluster
    $vmHosts = Get-Cluster -Name $clusterName | Get-VMHost
    
    foreach ($vmHost in $vmHosts) {
        Write-Host "Configuring host: $($vmHost.Name)"
        Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name) in cluster: $clusterName"

        # Define a hashtable of settings to apply
        $settings = @{
            "Security.AccountUnlockTime" = 900
            "Security.AccountLockFailures" = 3
            "Security.PasswordHistory" = 5
            "Security.PasswordQualityControl" = "similar=deny retry=3 min=disabled,disabled,disabled,14,14"
            "UserVars.DcuiTimeOut" = 600
            "UserVars.ESXiShellInteractiveTimeOut" = 600
            "UserVars.ESXiShellTimeOut" = 600
            "UserVars.SuppressShellWarning" = 0
            "Syslog.global.logHost" = "udp://160.219.63.155:514"
        }
        
        # Apply each setting
        foreach ($setting in $settings.GetEnumerator()) {
            $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
            $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
            Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
        }
        
        # vSwitch Security Settings
        $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmits $false -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmits to $false on virtual switches of $($vmHost.Name)"
        
        $vmHost | Get-VirtualPortGroup -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmitsInherited $true -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmitsInherited to $true on virtual port groups of $($vmHost.Name)"
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"


# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of clusters to apply the settings
$clusters = @("Cluster1", "Cluster2", "Cluster3")  # Replace with your cluster names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each cluster
foreach ($clusterName in $clusters) {
    Write-Host "Processing cluster: $clusterName"
    
    # Get all hosts in the current cluster
    $vmHosts = Get-Cluster -Name $clusterName | Get-VMHost
    
    foreach ($vmHost in $vmHosts) {
        Write-Host "Configuring host: $($vmHost.Name)"
        Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name) in cluster: $clusterName"

        # Define a hashtable of settings to apply
        $settings = @{
            "Security.AccountUnlockTime" = 900
            "Security.AccountLockFailures" = 3
            "Security.PasswordHistory" = 5
            "Security.PasswordQualityControl" = "similar=deny retry=3 min=disabled,disabled,disabled,14,14"
            "UserVars.SuppressHyperthreadWarning" = 0
            "UserVars.DcuiTimeOut" = 600
            "UserVars.ESXiShellInteractiveTimeOut" = 600
            "UserVars.ESXiShellTimeOut" = 600
            "Net.BlockGuestBPDU" = 1
            "UserVars.SuppressShellWarning" = 0
            "Syslog.global.logHost" = "udp://160.219.63.155:514"
        }
        
        # Apply each setting
        foreach ($setting in $settings.GetEnumerator()) {
            $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
            $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
            Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
        }
        
        # vSwitch Security Settings for all standard switches
        $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -AllowMacChanges $false -Confirm:$false
        Add-Content -Path $logFile -Value "Set MAC Address Changes to $false on standard virtual switches of $($vmHost.Name)"
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"


# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of ESXi hosts to apply the MAC Address Changes setting
$esxiHosts = @(
    "esxi-host1.domain.com",
    "esxi-host2.domain.com",
    "esxi-host3.domain.com"
)  # Replace with your ESXi host names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each ESXi host
foreach ($esxiHost in $esxiHosts) {
    Write-Host "Configuring MAC Address Changes policy for host: $esxiHost"
    Add-Content -Path $logFile -Value "Configuring MAC Address Changes policy for host: $esxiHost"

    # Get the host system object
    $vmHost = Get-VMHost -Name $esxiHost
    
    if ($vmHost) {
        # vSwitch Security Settings for all standard switches
        $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -AllowMacChanges $false -Confirm:$false
        Add-Content -Path $logFile -Value "Set MAC Address Changes to $false on standard virtual switches of $esxiHost"
    } else {
        Write-Host "ESXi host $esxiHost not found."
        Add-Content -Path $logFile -Value "ESXi host $esxiHost not found."
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"


# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "your-vcenter-server"
$LoginUser = "your-username"
$LoginPassword = "your-password"

# Connect to vCenter
Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of datastore names to retrieve NAA IDs
$datastoreNames = @("Datastore1", "Datastore2", "Datastore3")  # Replace with your datastore names

# Loop through each datastore name
foreach ($datastoreName in $datastoreNames) {
    # Get the datastore object
    $datastore = Get-Datastore -Name $datastoreName -ErrorAction SilentlyContinue
    
    if ($datastore) {
        # Get the canonical name (NAA ID) of the datastore
        $naaID = ($datastore.ExtensionData.Info.Vmfs.Extent | Select-Object -First 1).DiskName
        Write-Host "Datastore: $datastoreName, NAA ID: $naaID"
    } else {
        Write-Host "Datastore: $datastoreName not found"
    }
}

# Disconnect from vCenter
Disconnect-ViServer -Server $vCenterServer -Confirm:$false



# Import PowerCLI module
Import-Module VMware.PowerCLI

# Connect to vCenter Server
$vCenterServer = "your-vcenter-server"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# Log file to save output
$logFile = "C:\RDM_LUN_Report.csv"

# Initialize an array to store RDM details
$rdmDetails = @()

# Get all virtual machines in the vCenter
$vms = Get-VM

foreach ($vm in $vms) {
    Write-Host "Processing VM: $($vm.Name)"
    
    # Get RDM hard disks for the VM
    $rdmDisks = Get-HardDisk -VM $vm | Where-Object {$_.DiskType -eq "RawPhysical" -or $_.DiskType -eq "RawVirtual"}
    
    foreach ($rdmDisk in $rdmDisks) {
        # Get the SCSI LUN backing the RDM disk
        $scsiLun = Get-ScsiLun -VmHost $vm.VMHost -CanonicalName $rdmDisk.ScsiCanonicalName
        
        # Extract storage provider name from the SCSI LUN Vendor property
        $storageProvider = $scsiLun.Vendor
        
        # Add RDM details to the array
        $rdmDetails += [PSCustomObject]@{
            VMName          = $vm.Name
            Datastore       = $rdmDisk.Filename
            LUNCanonicalName = $rdmDisk.ScsiCanonicalName
            CapacityGB      = [Math]::Round($rdmDisk.CapacityGB, 2)
            StorageProvider = $storageProvider
        }
    }
}

# Export RDM details to a CSV file
$rdmDetails | Export-Csv -Path $logFile -NoTypeInformation -UseCulture

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "RDM LUN report generated at: $logFile"



# Import the PowerCLI module
Import-Module VMware.PowerCLI

# Connect to vCenter Server
$vCenterServer = "your-vcenter-server"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-VIServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of LUNs to be removed (Canonical Names)
$lunCanonicalNames = @(
    "naa.60002ac0000000000000000000000001",
    "naa.60002ac0000000000000000000000002",
    "naa.60002ac0000000000000000000000003"
) # Replace with the list of your LUN canonical names

# Loop through each cluster in the vCenter
$clusters = Get-Cluster
foreach ($cluster in $clusters) {
    Write-Host "Processing Cluster: $($cluster.Name)"
    
    # Get all ESXi hosts in the cluster
    $esxiHosts = Get-Cluster -Name $cluster.Name | Get-VMHost
    
    foreach ($esxiHost in $esxiHosts) {
        Write-Host "Processing Host: $($esxiHost.Name)"
        
        foreach ($lunCanonicalName in $lunCanonicalNames) {
            Write-Host "Processing LUN: $lunCanonicalName"

            # Check if the LUN is mounted as a VMFS datastore
            $datastore = Get-Datastore | Where-Object { $_.ExtensionData.Info.Vmfs.Extent | Where-Object { $_.DiskName -eq $lunCanonicalName } }
            if ($datastore) {
                Write-Host "Datastore found on LUN $lunCanonicalName: $($datastore.Name)"

                # Check if the datastore is in maintenance mode
                if ($datastore.State -eq "maintenance") {
                    # Unmount the datastore
                    Write-Host "Unmounting Datastore: $($datastore.Name)"
                    $datastore | Set-Datastore -State Unmounted -Confirm:$false
                } else {
                    Write-Host "Datastore $($datastore.Name) is not in maintenance mode. Skipping."
                    continue
                }
            }

            # Detach the LUN from the host
            $scsiLun = Get-ScsiLun -VmHost $esxiHost -CanonicalName $lunCanonicalName
            if ($scsiLun -and $scsiLun.State -eq "Attached") {
                Write-Host "Detaching LUN: $lunCanonicalName from Host: $($esxiHost.Name)"
                Remove-ScsiLun -ScsiLun $scsiLun -Confirm:$false
            } else {
                Write-Host "LUN $lunCanonicalName is already detached from Host: $($esxiHost.Name)"
            }
        }
    }
}

# Remove permanently detached LUNs from all ESXi hosts
Write-Host "Removing permanently detached LUNs..."
foreach ($lunCanonicalName in $lunCanonicalNames) {
    foreach ($esxiHost in Get-VMHost) {
        $detachedLun = Get-ScsiLun -VmHost $esxiHost | Where-Object { $_.CanonicalName -eq $lunCanonicalName -and $_.State -eq "NotPresent" }
        if ($detachedLun) {
            Write-Host "Removing LUN: $lunCanonicalName from Host: $($esxiHost.Name)"
            Remove-ScsiLun -ScsiLun $detachedLun -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName not found or already removed from Host: $($esxiHost.Name)"
        }
    }
}

# Disconnect from vCenter Server
Disconnect-VIServer -Server $vCenterServer -Confirm:$false

Write-Host "Script execution complete."



# Import the PowerCLI module
Import-Module VMware.PowerCLI

# Connect to the vCenter Server
$vCenterServer = "your-vcenter-server"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-VIServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# Output CSV file to save the results
$outputFile = "C:\3PAR_LUNs_Report.csv"

# Initialize an array to store the results
$lunDetails = @()

# Get all ESXi hosts in the vCenter
$vmHosts = Get-VMHost

# Loop through each ESXi host
foreach ($vmHost in $vmHosts) {
    Write-Host "Processing host: $($vmHost.Name)"

    # Get all the LUNs for the host
    $scsiLuns = Get-ScsiLun -VmHost $vmHost | Where-Object {
        $_.Vendor -match "3PAR" -and $_.Model -match "VV" # Filtering for HPE 3PAR LUNs
    }

    foreach ($scsiLun in $scsiLuns) {
        # Add LUN details to the array
        $lunDetails += [PSCustomObject]@{
            HostName       = $vmHost.Name
            LUNDisplayName = $scsiLun.DisplayName
            CanonicalName  = $scsiLun.CanonicalName
            NAAID          = $scsiLun.CanonicalName
            CapacityGB     = [Math]::Round($scsiLun.CapacityKB / 1MB, 2)
            Vendor         = $scsiLun.Vendor
            Model          = $scsiLun.Model
        }
    }
}

# Export the results to a CSV file
if ($lunDetails.Count -gt 0) {
    $lunDetails | Export-Csv -Path $outputFile -NoTypeInformation -UseCulture
    Write-Host "LUN details exported to $outputFile"
} else {
    Write-Host "No HPE 3PAR LUNs found in vCenter."
}

# Disconnect from the vCenter Server
Disconnect-VIServer -Server $vCenterServer -Confirm:$false

Write-Host "Script execution completed."



# Load VMware PowerCLI module
Import-Module VMware.PowerCLI

# Define vCenter credentials and cluster details
$vcenterServer = "vCenter_FQDN"
$sourceCluster = "Source_Cluster_Name"
$targetCluster = "Target_Cluster_Name"

# CSV File containing VM list and target hosts (columns: VMName, TargetHost)
$vmListFile = "C:\Path\To\VMList.csv"

# Connect to vCenter
Connect-VIServer -Server $vcenterServer

# Load VM list from CSV
$vmList = Import-Csv -Path $vmListFile

# Loop through the VMs
foreach ($vm in $vmList) {
    $vmName = $vm.VMName
    $targetHostName = $vm.TargetHost

    # Get VM object
    $vmObj = Get-VM -Name $vmName

    if ($vmObj) {
        try {
            # Check if VM is powered off
            if ($vmObj.PowerState -ne "PoweredOff") {
                Write-Host "VM $vmName is not powered off. Skipping." -ForegroundColor Yellow
                continue
            }

            # Unregister the VM
            Write-Host "Unregistering VM $vmName from $sourceCluster" -ForegroundColor Yellow
            $vmxPath = (Get-HardDisk -VM $vmObj | Select-Object -First 1).Filename.Replace(".vmdk", ".vmx")
            Remove-VM -VM $vmObj -Confirm:$false

            # Ensure the target host exists
            $targetHost = Get-VMHost -Name $targetHostName
            if ($targetHost) {
                # Register the VM on the target host
                Write-Host "Registering VM $vmName on $targetHostName in $targetCluster" -ForegroundColor Green
                New-VM -VMFilePath $vmxPath -VMHost $targetHost -Confirm:$false
            } else {
                Write-Host "Target host $targetHostName not found. Skipping VM $vmName." -ForegroundColor Red
            }
        } catch {
            Write-Host "Failed to process VM $vmName. Error: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "VM $vmName not found in the inventory. Skipping." -ForegroundColor Red
    }
}

# Disconnect from vCenter
Disconnect-VIServer -Server $vcenterServer -Confirm:$false

Write-Host "Script completed." -ForegroundColor Green




# Connect to vCenter Server
$vCenterServer = ""
$LoginUser = ""
$LoginPassword = "your-password"

Connect-VIServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of LUNs to be removed (Canonical Names)
$lunCanonicalNames = @(
    "naa.60002ac0000000000000000000000001",
    "naa.60002ac0000000000000000000000002",
    "naa.60002ac0000000000000000000000003"
) 

# Loop through each cluster in the vCenter
$clusters = Get-Cluster
foreach ($cluster in $clusters) {
    Write-Host "Processing Cluster: $($cluster.Name)"
    
    # Get all ESXi hosts in the cluster
    $esxiHosts = Get-Cluster -Name $cluster.Name | Get-VMHost
    
    foreach ($esxiHost in $esxiHosts) {
        Write-Host "Processing Host: $($esxiHost.Name)"
        
        foreach ($lunCanonicalName in $lunCanonicalNames) {
            Write-Host "Processing LUN: $lunCanonicalName"

            # Check if the LUN is mounted as a VMFS datastore
            $datastore = Get-Datastore | Where-Object { $_.ExtensionData.Info.Vmfs.Extent | Where-Object { $_.DiskName -eq $lunCanonicalName } }
            if ($datastore) {
                Write-Host "Datastore found on LUN $lunCanonicalName: $($datastore.Name)"

                # Check if the datastore is in maintenance mode
                if ($datastore.State -eq "maintenance") {
                    # Unmount the datastore
                    Write-Host "Unmounting Datastore: $($datastore.Name)"
                    $datastore | Set-Datastore -State Unmounted -Confirm:$false
                } else {
                    Write-Host "Datastore $($datastore.Name) is not in maintenance mode. Skipping."
                    continue
                }
            }

            # Detach the LUN from the host
            $scsiLun = Get-ScsiLun -VmHost $esxiHost -CanonicalName $lunCanonicalName
            if ($scsiLun -and $scsiLun.State -eq "Attached") {
                Write-Host "Detaching LUN: $lunCanonicalName from Host: $($esxiHost.Name)"
                Remove-ScsiLun -ScsiLun $scsiLun -Confirm:$false
            } else {
                Write-Host "LUN $lunCanonicalName is already detached from Host: $($esxiHost.Name)"
            }
        }
    }
}

# Remove permanently detached LUNs from all ESXi hosts
Write-Host "Removing permanently detached LUNs..."
foreach ($lunCanonicalName in $lunCanonicalNames) {
    foreach ($esxiHost in Get-VMHost) {
        $detachedLun = Get-ScsiLun -VmHost $esxiHost | Where-Object { $_.CanonicalName -eq $lunCanonicalName -and $_.State -eq "NotPresent" }
        if ($detachedLun) {
            Write-Host "Removing LUN: $lunCanonicalName from Host: $($esxiHost.Name)"
            Remove-ScsiLun -ScsiLun $detachedLun -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName not found or already removed from Host: $($esxiHost.Name)"
        }
    }
}

# Disconnect from vCenter Server
Disconnect-VIServer -Server $vCenterServer -Confirm:$false

Write-Host "Script execution complete."


# Connect to vCenter Server
$vCenterServer = ""
$LoginUser = ""
$LoginPassword = "your-password"

Connect-VIServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of ESXi Hosts to Process
$esxiHosts = @(
    "esxi-host1.domain.com",
    "esxi-host2.domain.com",
    "esxi-host3.domain.com"
)

# List of LUNs to be removed (Canonical Names)
$lunCanonicalNames = @(
    "naa.60002ac0000000000000000000000001",
    "naa.60002ac0000000000000000000000002",
    "naa.60002ac0000000000000000000000003"
)

# Process each ESXi host
foreach ($esxiHost in $esxiHosts) {
    Write-Host "Processing Host: $esxiHost"

    # Get VMHost object
    $vmHost = Get-VMHost -Name $esxiHost

    foreach ($lunCanonicalName in $lunCanonicalNames) {
        Write-Host "Processing LUN: $lunCanonicalName on Host: $esxiHost"

        # Check if the LUN is mounted as a VMFS datastore
        $datastore = Get-Datastore | Where-Object { $_.ExtensionData.Info.Vmfs.Extent | Where-Object { $_.DiskName -eq $lunCanonicalName } }
        if ($datastore) {
            Write-Host "Datastore found on LUN $lunCanonicalName: $($datastore.Name)"

            # Check if the datastore is in maintenance mode
            if ($datastore.State -eq "maintenance") {
                Write-Host "Unmounting Datastore: $($datastore.Name)"
                $datastore | Set-Datastore -State Unmounted -Confirm:$false
            } else {
                Write-Host "Datastore $($datastore.Name) is not in maintenance mode. Skipping unmount."
                continue
            }
        }

        # Detach the LUN from the host
        $scsiLun = Get-ScsiLun -VmHost $vmHost -CanonicalName $lunCanonicalName
        if ($scsiLun -and $scsiLun.State -eq "Attached") {
            Write-Host "Detaching LUN: $lunCanonicalName from Host: $esxiHost"
            Remove-ScsiLun -ScsiLun $scsiLun -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName is already detached from Host: $esxiHost"
        }
    }
}

# Remove permanently detached LUNs from each ESXi host
Write-Host "Removing permanently detached LUNs..."
foreach ($esxiHost in $esxiHosts) {
    $vmHost = Get-VMHost -Name $esxiHost
    foreach ($lunCanonicalName in $lunCanonicalNames) {
        $detachedLun = Get-ScsiLun -VmHost $vmHost | Where-Object { $_.CanonicalName -eq $lunCanonicalName -and $_.State -eq "NotPresent" }
        if ($detachedLun) {
            Write-Host "Removing LUN: $lunCanonicalName from Host: $esxiHost"
            Remove-ScsiLun -ScsiLun $detachedLun -Confirm:$false
        } else {
            Write-Host "LUN $lunCanonicalName not found or already removed from Host: $esxiHost"
        }
    }
}

# Disconnect from vCenter Server
Disconnect-VIServer -Server $vCenterServer -Confirm:$false

Write-Host "Script execution complete."



# Import the required PowerCLI modules
Import-Module VMware.PowerCLI
Import-Module VMware.vSphere.SsoAdmin

# Connect to vCenter Server
$vCenter = "vcenter.example.com"
$username = "administrator@vsphere.local"
$password = "YourAdminPassword"

Connect-VIServer -Server $vCenter -User $username -Password $password

# Path to the CSV file containing user details
$csvPath = "C:\path\to\users.csv"

# Import the CSV file
$users = Import-Csv -Path $csvPath

# Loop through each user and create them in the SSO domain
foreach ($user in $users) {
    $username = $user.Username
    $password = $user.Password
    $description = $user.Description

    # Create the SSO user
    try {
        New-SsoPersonUser -UserName $username -Password $password -Description $description -Confirm:$false
        Write-Host "User '$username' created successfully in the SSO domain."
    } catch {
        Write-Host "Failed to create user '$username': $_"
    }
}

# Disconnect from vCenter Server
Disconnect-VIServer -Confirm:$false

Write-Host "All users have been processed."
