# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of clusters to apply the settings
$clusters = @("Cluster1", "Cluster2", "Cluster3")  # Replace with your cluster names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each cluster
foreach ($clusterName in $clusters) {
    Write-Host "Processing cluster: $clusterName"
    
    # Get all hosts in the current cluster
    $vmHosts = Get-Cluster -Name $clusterName | Get-VMHost
    
    foreach ($vmHost in $vmHosts) {
        Write-Host "Configuring host: $($vmHost.Name)"
        Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name) in cluster: $clusterName"

        # Define a hashtable of settings to apply
        $settings = @{
            "Security.AccountUnlockTime" = 900
            "Security.AccountLockFailures" = 3
            "Security.PasswordHistory" = 5
            "Security.PasswordQualityControl" = "similar=deny retry=3 min=disabled,disabled,disabled,14,14"
            "UserVars.SuppressHyperthreadWarning" = 0
            "UserVars.DcuiTimeOut" = 600
            "UserVars.ESXiShellInteractiveTimeOut" = 600
            "UserVars.ESXiShellTimeOut" = 600
            "Net.BlockGuestBPDU" = 1
            "UserVars.SuppressShellWarning" = 0
            "Syslog.global.logHost" = "udp://160.219.63.155:514"
        }
        
        # Apply each setting
        foreach ($setting in $settings.GetEnumerator()) {
            $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
            $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
            Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
        }
        
        # vSwitch Security Settings
        $vmHost | Get-VirtualSwitch | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmits $false -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmits to $false on virtual switches of $($vmHost.Name)"
        
        $vmHost | Get-VirtualPortGroup | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmitsInherited $true -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmitsInherited to $true on virtual port groups of $($vmHost.Name)"
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"





# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "ch-sv01993.group.intra"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# List of host folders to apply the settings
$hostFolders = @("HostFolder1", "HostFolder2", "HostFolder3")  # Replace with your host folder names

# Log file location
$logFile = "C:\VMHostSettingsLog.txt"

# Loop through each host folder
foreach ($folderName in $hostFolders) {
    Write-Host "Processing host folder: $folderName"
    
    # Get all hosts in the current host folder
    $vmHosts = Get-Folder -Name $folderName | Get-VMHost
    
    foreach ($vmHost in $vmHosts) {
        Write-Host "Configuring host: $($vmHost.Name)"
        Add-Content -Path $logFile -Value "Configuring host: $($vmHost.Name) in folder: $folderName"

        # Define a hashtable of settings to apply
        $settings = @{
            "Security.AccountUnlockTime" = 900
            "Security.AccountLockFailures" = 3
            "Security.PasswordHistory" = 5
            "Security.PasswordQualityControl" = "similar=deny retry=3 min=disabled,disabled,disabled,14,14"
            "UserVars.SuppressHyperthreadWarning" = 0
            "UserVars.DcuiTimeOut" = 600
            "UserVars.ESXiShellInteractiveTimeOut" = 600
            "UserVars.ESXiShellTimeOut" = 600
            "Net.BlockGuestBPDU" = 1
            "UserVars.SuppressShellWarning" = 0
            "Syslog.global.logHost" = "udp://160.219.63.155:514"
        }
        
        # Apply each setting
        foreach ($setting in $settings.GetEnumerator()) {
            $advancedSetting = $vmHost | Get-AdvancedSetting -Name $setting.Key
            $advancedSetting | Set-AdvancedSetting -Value $setting.Value -Confirm:$false
            Add-Content -Path $logFile -Value "Set $($setting.Key) to $($setting.Value) on $($vmHost.Name)"
        }
        
        # vSwitch Security Settings (Exclude Distributed Switches)
        $vmHost | Get-VirtualSwitch -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmits $false -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmits to $false on standard virtual switches of $($vmHost.Name)"
        
        $vmHost | Get-VirtualPortGroup -Standard | Get-SecurityPolicy | Set-SecurityPolicy -ForgedTransmitsInherited $true -Confirm:$false
        Add-Content -Path $logFile -Value "Set ForgedTransmitsInherited to $true on standard port groups of $($vmHost.Name)"
    }
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Configuration complete. Logs can be found at $logFile"


# Importing the PowerCLI module
Import-Module VMware.PowerCLI

# Connecting to the vCenter Server
$vCenterServer = "your-vcenter-server"
$LoginUser = "your-username"
$LoginPassword = "your-password"

Connect-ViServer -Server $vCenterServer -User $LoginUser -Password $LoginPassword

# Fetch and list all clusters
Write-Host "Clusters in vCenter:"
$clusters = Get-Cluster
foreach ($cluster in $clusters) {
    Write-Host "- Cluster Name: $($cluster.Name)"
}

# Fetch and list all host folders
Write-Host "Host Folders in vCenter:"
$hostFolders = Get-Folder -Type VMHost
foreach ($folder in $hostFolders) {
    Write-Host "- Folder Name: $($folder.Name)"
}

# Disconnect from vCenter Server
Disconnect-ViServer -Server $vCenterServer -Confirm:$false

Write-Host "Listing complete."
