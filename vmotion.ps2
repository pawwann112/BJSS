To create a vRO (vRealize Orchestrator) standalone workflow that clones a VM from a template and applies guest customization using an existing customization spec in vCenter Server, we can modify the out-of-the-box workflow “Clone, Windows/Linux with single NIC.” This out-of-the-box workflow typically handles basic VM provisioning from a template, but we can tweak it to ensure it uses a predefined guest customization spec in vCenter.

Here’s a high-level overview of the steps involved in creating the workflow:

---

### **Workflow Overview:**
**Name:** Clone and Create VM from Template with Guest Customization Spec

**Steps:**
1. **Input Parameters:** Define the input parameters for the workflow.
2. **Find Template:** Locate the VM template in vCenter.
3. **Select Datastore:** Choose the datastore where the new VM will be stored.
4. **Clone VM:** Clone the VM using the `CloneVM_Task` method.
5. **Guest Customization:** Apply the guest customization specification (an existing spec in vCenter).
6. **Power On VM:** After the cloning and customization are complete, power on the VM.
7. **Output Parameters:** Return relevant information about the new VM.

---

### **Detailed Workflow Steps:**

#### 1. **Create Workflow:**
- Open vRealize Orchestrator Client.
- Create a new workflow and name it appropriately (e.g., "Clone VM with Guest Customization").

#### 2. **Input Parameters:**
Define the following input parameters in the schema:
- **vmTemplate** (Type: VC:VirtualMachine) – The VM template to clone.
- **vmName** (Type: String) – The name of the new VM.
- **datastore** (Type: VC:Datastore) – The datastore where the VM will be stored.
- **resourcePool** (Type: VC:ResourcePool) – The resource pool in which the VM will be placed.
- **host** (Type: VC:HostSystem) – The host to place the VM on (if needed).
- **customizationSpecName** (Type: String) – The name of the guest customization spec in vCenter.
- **folder** (Type: VC:VmFolder) – The folder where the VM will be placed.

#### 3. **Locate VM Template (Optional):**
- Use an out-of-the-box action such as `getAllVMsMatchingRegexp` to search and select the VM template if needed.

#### 4. **Clone VM Task:**
- Use the **"Clone Virtual Machine"** workflow element or JavaScript code to call the `CloneVM_Task` method from the vCenter API.
  
Add a scriptable task or use the **"CloneVM_Task"** method to clone the VM:
```javascript
// Retrieve the customization spec by name
var customizationSpecMgr = vmTemplate.sdkConnection.customizationSpecManager;
var specItem = customizationSpecMgr.getCustomizationSpec(customizationSpecName);
var customizationSpec = specItem.spec;

var relocateSpec = new VcVirtualMachineRelocateSpec();
relocateSpec.datastore = datastore;
relocateSpec.pool = resourcePool;

var cloneSpec = new VcVirtualMachineCloneSpec();
cloneSpec.location = relocateSpec;
cloneSpec.customization = customizationSpec;  // Use the existing customization spec
cloneSpec.powerOn = false; // We’ll power it on later manually

var cloneTask = vmTemplate.cloneVM_Task(folder, vmName, cloneSpec);
```

#### 5. **Wait for Clone to Complete:**
- Use **"Wait for Task End"** to ensure the clone task is complete.

#### 6. **Power On the VM:**
- After the VM is cloned and customized, power it on using the vCenter API.
```javascript
// Power on the newly created VM
var newVM = cloneTask.info.result;
newVM.powerOnVM_Task();
```

#### 7. **Output Parameters:**
- Add an output parameter for the newly created VM:
  - **vmOutput** (Type: VC:VirtualMachine) – The cloned VM object.

---

### **Workflow Schema:**
1. **Start** – Initial point.
2. **Scriptable Task (Locate VM Template)** – (Optional) Code to locate a VM template.
3. **User Interaction (Select Datastore and Resources)** – (Optional) Prompt the user to select the datastore, host, and resource pool.
4. **Clone VM Task** – A scriptable task using `CloneVM_Task` API, referencing the customization spec.
5. **Wait for Clone to Complete** – An action that waits for the cloning task to finish.
6. **Power On VM Task** – A scriptable task to power on the new VM.
7. **End** – End of the workflow.

---

### **Customization and Enhancements:**
- **Error Handling:** Add error handling mechanisms to handle cases where the clone fails or the customization spec is not found.
- **Datastore Selection:** You can prompt the user to select a datastore or automatically assign one based on policy.
- **Folder and Resource Pool:** Modify the workflow to allow dynamic folder and resource pool selection if required.
- **Customization Spec:** Ensure that the customization spec exists in vCenter before applying it to avoid failures.

---

This workflow will allow you to clone a VM from a template, customize it using a predefined customization spec in vCenter, and then power on the VM. You can expand or modify this workflow further depending on your specific use case and requirements.
